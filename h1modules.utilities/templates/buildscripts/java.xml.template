<?xml version="1.0" encoding="UTF-8"?>
<project name="javaextension" default="jar">
  <description>
            Build Script for HISinOne Extension
    </description>

  <!-- Umgebungsvariablen sollen in den Builds verfügbar sein -->
  <property environment="env" />

  <!-- If REQUIRED-VERSION was not set during ant invokation, set it based on gitlabTargetBranch -->
  <condition property="REQUIRED-VERSION" value="HEAD" else="${env.gitlabTargetBranch}">
    <equals arg1="${env.gitlabTargetBranch}" arg2="master" />
  </condition>

  <!-- Lokal koennen per Propertiesdatei Werte Ueberschrieben werden -->
  <property file="${user.name}.ant.properties" />

  <!--
  Parameter, die modulspezifisch sind, werden in der modul.ant.properties gepflegt:
  - Modulname: extension.name
  -->
  <property file="extension.ant.properties" />

  <property name="build" value="build" />

  <property name="dist" value="dist" />


  <!-- Jenkins oder Eclipse Verzeichnisstruktur? -->
  <condition property="webapps" value="${WORKSPACE}/../../../webapps_${REQUIRED-VERSION}/workspace/webapps">
    <isset property="env.JENKINS_HOME" />
  </condition>
  <condition property="webapps" value="../webapps" else="../../webapps">
    <resourceexists>
      <file file="../webapps" />
    </resourceexists>
  </condition>
  <condition property="classpath.project.prefix" value="${WORKSPACE}/../../../" else="../">
    <isset property="env.JENKINS_HOME" />
  </condition>
  <condition property="classpath.project.postfix" value="_${REQUIRED-VERSION}/workspace" else="">
    <isset property="env.JENKINS_HOME" />
  </condition>


  <!-- Abhängige Projekte in classpath aufnehmen -->
  <loadfile srcfile=".classpath" property="classpath.project.dependencies">
    <filterchain>
      <linecontains>
        <contains value="kind=&quot;src&quot;" />
        <contains value="path=&quot;/" />
      </linecontains>
      <replaceregex pattern=".*path=&quot;/([^&quot;]*)&quot;.*" replace="${classpath.project.prefix}\1${classpath.project.postfix}/build/classes"/>
      <suffixlines suffix=":"/>
      <striplinebreaks/>
    </filterchain>
  </loadfile>

  <!-- Classpath-Erweiterungen -->
  <path id="additional-classpath"></path>
  <import file="compile-classpath.xml" optional="true" />


  <property name="cobertura-dir" value="${webapps}/qisserver/WEB-INF/lib-compile" />
  <property name="build-server" value="http://build.his.de/build/" />

  <path id="compile-classpath">
    <pathelement location="${webapps}/qisserver/WEB-INF/classes" />
    <pathelement path="${classpath.project.dependencies}" />
    <fileset dir="${webapps}/qisserver/WEB-INF/lib">
      <include name="*.jar" />
      <exclude name="ant-1.8.1.jar" />
      <exclude name="asm-3.2.jar" />
    </fileset>
    <fileset dir="${webapps}/qisserver/WEB-INF/lib-compile">
      <include name="*.jar" />
    </fileset>
    <fileset dir="lib" erroronmissingdir="false">
      <include name="*.jar" />
    </fileset>
    <path refid="additional-classpath" />
  </path>

  <path id="additional-sourcepath"></path>
  <import file="compile-sourcepath.xml" optional="true" />

  <path id="additional-test-classpath" />
  <import file="compile-test-classpath.xml" optional="true" />

  <path id="compile-sourcepath">
    <dirset dir="src">
      <include name="java" />
      <include name="generated" />
    </dirset>
    <path refid="additional-sourcepath" />
  </path>

  <path id="compile-test-classpath">
    <pathelement location="${build}/classes" />
    <pathelement location="${build}/test" />
    <path refid="compile-classpath" />
    <path refid="additional-test-classpath" />
  </path>

  <path id="cobertura-classpath">
    <fileset dir="${webapps}/qisserver/WEB-INF/lib">
      <include name="*.jar" />
      <exclude name="ant-1.8.1.jar" />
      <exclude name="asm-3.2.jar" />
    </fileset>
    <fileset dir="${webapps}/qisserver/WEB-INF/extensions">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${webapps}/qisserver/WEB-INF/internal/ant/lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <path id="cobertura-test-classpath">
    <pathelement location="${build}/cobertura_build" />
    <pathelement location="${build}/test" />
    <pathelement location="resource" />
    <path refid="compile-test-classpath" />
    <path refid="cobertura-classpath" />
  </path>

  <taskdef classpathref="cobertura-classpath" resource="tasks.properties" />

  <path id="compile-test-sourcepath">
    <dirset dir="src">
      <include name="test" />
    </dirset>
  </path>

  <target name="clean">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${build}" />
      <fileset dir="${dist}" />
    </delete>
  </target>

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build}/results" />
    <mkdir dir="${build}/test" />
    <mkdir dir="${build}/classes" />
    <mkdir dir="${build}/classes/META-INF/resources" />
    <mkdir dir="${dist}" />
  </target>

  <target name="compile" depends="init">
    <javac destdir="${build}/classes" debug="on" debuglevel="source,lines,vars" includeantruntime="false" source="1.8" target="1.8" encoding="UTF-8" compiler="org.eclipse.jdt.core.JDTCompilerAdapter">
      <compilerarg line="-encoding UTF-8" />
      <compilerarg line="-enableJavadoc" />
      <compilerarg line="-properties .settings/org.eclipse.jdt.core.prefs" />
      <classpath refid="compile-classpath" />
      <src refid="compile-sourcepath" />
    </javac>
    <copy todir="${build}/classes" verbose="true">
      <fileset dir="src/java">
        <filename name="**/*.java" negate="true" />
      </fileset>
    </copy>
    <copy todir="${build}/classes/META-INF/resources">
      <fileset dir="resource" />
    </copy>
  </target>

  <available file=".git" type="dir" property="git.present" />
  <target name="git-revision" description="Store git revision in ${repository.version}" if="git.present">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg value="rev-parse" />
      <arg value="HEAD" />
    </exec>
    <condition property="repository.version" value="${git.revision}">
      <and>
        <isset property="git.revision" />
        <length string="${git.revision}" trim="yes" length="0" when="greater" />
      </and>
    </condition>
  </target>

  <target name="jenkins-data" depends="git-revision">
    <property name="git.version">${env.GIT_COMMIT}</property>
    <condition property="extension.revision" value="${env.BUILD_TAG}-${env.GIT_COMMIT}" else="unknown">
      <isset property="env.BUILD_TAG" />
    </condition>
  </target>

  <target name="jar" description="Extension JAR für die Distribution erzeugen" depends="compile,jenkins-data">
    <jar destfile="${dist}/${extension.name}.jar" index="true">
      <fileset dir="${build}/classes" />
      <fileset dir="src/java">
        <filename name="**/*.java" />
      </fileset>
      <fileset dir="src/generated">
        <filename name="**/*.java" />
      </fileset>
      <manifest>
        <attribute name="Extension-Name" value="${extension.name}" />
        <attribute name="Extension-Version" value="${extension.version}" />
        <attribute name="Extension-ExtendedPoints" value="${extension.extended-points}" />
        <attribute name="Extension-Revision" value="${extension.revision}" />
        <attribute name="Extension-Git-Commit" value="${repository.version}" />
        <attribute name="Extension-Only-Resources" value="${extension.onlyresources}" />
      </manifest>
    </jar>
  </target>

  <target name="compile-tests" depends="compile">
    <javac srcdir="src/test" destdir="${build}/test" debug="on" includeantruntime="false" source="1.8" target="1.8" encoding="UTF-8" compiler="org.eclipse.jdt.core.JDTCompilerAdapter">
      <compilerarg line="-encoding UTF-8" />
      <compilerarg line="-enableJavadoc" />
      <compilerarg line="-properties .settings/org.eclipse.jdt.core.prefs" />
      <classpath refid="compile-test-classpath" />
      <sourcepath refid="compile-test-sourcepath" />
    </javac>
    <copy todir="${build}/test" verbose="true">
      <fileset dir="src/test">
        <filename name="**/*.java" negate="true" />
      </fileset>
    </copy>
  </target>

  <target name="coverage-instrument" depends="compile-tests">
    <delete file="${build}/cobertura.ser" quiet="true" />

    <cobertura-instrument todir="${build}/cobertura_build" datafile="${build}/cobertura.ser">
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${build}/classes">
        <include name="**/*.class" />
      </fileset>
      <auxClasspath>
        <pathelement path="${webapps}/qisserver/WEB-INF/classes " />
        <fileset dir="${webapps}/qisserver/WEB-INF/lib">
          <include name="**/*.jar" />
        </fileset>
        <fileset dir="${webapps}/qisserver/WEB-INF/lib-compile">
          <include name="**/*.jar" />
        </fileset>
      </auxClasspath>
    </cobertura-instrument>
  </target>

  <target name="coverage-test" depends="coverage-instrument">
    <junit printsummary="yes" haltonerror="false" fork="true" forkmode="once">
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${build}/cobertura.ser" />
      <sysproperty key="extension.name" value="${extension.name}" />
      <jvmarg value="-XX:MaxPermSize=512M" />
      <classpath refid="cobertura-test-classpath" />
      <batchtest todir="${build}/results">
        <fileset dir="src/test">
          <include name="**/*Test.java" />
          <include name="**/Test*.java" />
        </fileset>
        <formatter type="plain" usefile="false" />
        <formatter type="xml" usefile="true" />
      </batchtest>
    </junit>
  </target>

  <target name="coverage-report" depends="coverage-test,macker-check-ci-build">
    <cobertura-report format="html" destdir="${build}/coveragereport" datafile="${build}/cobertura.ser">
      <fileset dir="src/java" />
    </cobertura-report>
    <cobertura-report format="xml" destdir="${build}/coveragereport" datafile="${build}/cobertura.ser">
      <fileset dir="src/java" />
    </cobertura-report>
  </target>

  <target name="update-webapps">
    <loadfile property="cvs.tag" srcFile="${webapps}/CVS/Tag" failonerror="false">
      <filterchain>
        <striplinebreaks />
        <tokenfilter>
          <replaceregex pattern="^T" replace="" />
          <replaceregex pattern="^D.*" replace="HEAD" />
        </tokenfilter>
      </filterchain>
    </loadfile>

    <condition property="cvs.tag" value="${cvs.tag}" else="HEAD">
      <resourceexists>
        <file file="${webapps}/CVS/Tag" />
      </resourceexists>
    </condition>

    <property name="latest-build-result" value="${build-server}job/${extension.name}_${cvs.tag}/lastSuccessfulBuild/artifact/dist/${extension.name}.jar" />

    <get dest="${webapps}/qisserver/WEB-INF/extensions/${extension.name}.jar" src="${latest-build-result}" />
  </target>

  <target name="import-testresults" depends="coverage-test">
    <java classname="de.his.core.tools.testrun.log.JUnitXMLReader" classpathref="cobertura-test-classpath" fork="true">
      <jvmarg value="-Dfile.encoding=UTF-8" />
      <jvmarg value="-Xmx2048m" />
      <jvmarg value="-XX:MaxPermSize=256m" />
      <arg value="${REQUIRED-VERSION}" />
      <arg value="extension-${extension.name}" />
      <arg value="${build}/results" />
    </java>
    <echo message="Übersicht der Testergebnisse: http://qisdev.his.de/testresults/junittags.php?branch=${REQUIRED-VERSION}&amp;runtype=extension-${extension.name}&amp;g=&amp;t=" />
  </target>

  <import file="additional-targets.xml" optional="false" />

</project>
